ols_mallows_cp(model = lm(WinPct ~ BattingAverage + Runs + Saves + WHIP, data = MLBStandings2016), fullmodel = full_model)
data("NCbirths")
View(NCbirths)
data("NCbirths")
summary(lm(BirthWeigjtOz ~ MomRace, data = "NCbirths"))
summary(lm(BirthWeigjtOz ~ MomRace, data = "NCbirths"))
summary(lm(BirthWeigjtOz ~ MomRace, data = NCbirths))
data("NCbirths")
summary(lm(BirthWeigjtOz ~ MomRace, data = NCbirths))
data("NCbirths")
summary(lm(BirthWeightOz ~ MomRace, data = NCbirths))
summary(lm(BirthWeightOz ~ MomRace, data = NCbirths))
anova(lm(BirthWeightOz ~ MomRace, data = NCbirths))
# read in the data from the downloaded file
surgery_data <- read.csv(file.choose())
head(surgery_data)
names(surgery_data)[1] <- "SurvivalTime" #get rid of the i.. as RStudio labels the first column incorrectly
head(surgery_data)
head(surgery_data)
names(surgery_data)[1] <- "SurvivalTime" #get rid of the i.. as RStudio labels the first column incorrectly
head(surgery_data)
## Data processing to observe *only* quantitative variables
#  you can use this code *or not*, as you desire.
surgery_quantonly <- surgery_data %>%
dplyr::select(-Sex, -Alcohol)
favstats(surgery_data$SurvivalTime)
favstats(surgery_data$SurvivalTime)
favstats(surgery_data$PrognosticIndex)
# EDA for first research question
favstats(surgery_data$SurvivalTime)
favstats(surgery_data$PrognosticIndex)
# Now fit the model for the first research question
summary(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data))
# Now fit the model for the first research question
summary(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data))
mplot(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data), which = 1)
mplot(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data), which = 2)
# try graphing log(y) vs x to visualize a model using a log transformation
summary(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data))
mplot(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data), which = 1)
# try graphing log(y) vs x to visualize a model using a log transformation
summary(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data))
plot(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data), which = 1)
plot(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data), which = 2)
summary(lm(SurvivalTime ~.,data = surgery_data))
vif(lm(SurvivalTime ~.,data = surgery_data))
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
gf_point(SurvivalTime ~.,data = surgery_data)
gf_point(lm(SurvivalTime ~.,data = surgery_data))
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
plot(lm(SurvivalTime ~.,data = surgery_data))
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
mplot(lm(SurvivalTime ~.,data = surgery_data))
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
mplot(SurvivalTime ~.,data = surgery_data)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
mplot(SurvivalTime ~.,data = surgery_data)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
plot(lm(log(SurvivalTime) ~.,data = surgery_data), which = 1)
plot(lm(log(SurvivalTime) ~.,data = surgery_data), which = 2)
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(car)
library(leaps)
library(HH)
library(tinytex)
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(car)
library(leaps)
library(HH)
library(tinytex)
data("MLBStandings2016")
MLBStandings2016 <- MLBStandings2016 %>%
dplyr::select(-Team, -Wins, -Losses)
none <- lm(WinPct ~ 1, data = MLBStandings2016)
full_model <- lm(WinPct ~ ., data = MLBStandings2016)
MSE = (summary(full_model)$sigma)^2
step(none, scope = list(upper=full_model), scale = MSE, direction = "forward")
summary(lm(WinPct ~ ERA + Runs + Saves + WHIP,
data = MLBStandings2016))
back = regsubsets(WinPct ~ ., data = MLBStandings2016, nbest = 1, nvmax = 4, method = "backward")
summary(back)
full_model <- lm(WinPct ~ ., data = MLBStandings2016)
MSE = (summary(full_model)$sigma)^2
step(full_model, scale = MSE, direction = "backward", nvmax = 4, nbest = 1)
summary(lm(WinPct ~ BattingAverage + Runs + Saves + WHIP, data = MLBStandings2016))
all <- regsubsets(WinPct ~ ., data = MLBStandings2016, nbest = 1)
plot(all,scale = "adjr2")
plot(all,scale = "Cp")
plot(all,scale= "bic")
summaryHH(all)
summary(lm(WinPct ~ Runs + Doubles + Saves + WHIP, data = MLBStandings2016))
library(olsrr)
ols_mallows_cp(model = lm(WinPct ~ ERA + Runs + Saves + WHIP, data = MLBStandings2016), fullmodel = full_model)
ols_mallows_cp(model = lm(WinPct ~ BattingAverage + Runs + Saves + WHIP, data = MLBStandings2016), fullmodel = full_model)
ols_mallows_cp(model = lm(WinPct ~ Runs + Doubles + Saves + WHIP, data = MLBStandings2016), fullmodel = full_model)
data("NCbirths")
summary(lm(BirthWeightOz ~ MomRace, data = NCbirths))
summary(lm(BirthWeightOz ~ MomRace, data = NCbirths))
anova(lm(BirthWeightOz ~ MomRace, data = NCbirths))
# read in the data from the downloaded file
surgery_data <- read.csv(file.choose())
head(surgery_data)
names(surgery_data)[1] <- "SurvivalTime" #get rid of the i.. as RStudio labels the first column incorrectly
head(surgery_data)
## Data processing to observe *only* quantitative variables
#  you can use this code *or not*, as you desire.
surgery_quantonly <- surgery_data %>%
dplyr::select(-Sex, -Alcohol)
favstats(surgery_data$SurvivalTime)
favstats(surgery_data$PrognosticIndex)
## EDA - look at response with categorical predictors
# EDA for first research question
favstats(surgery_data$SurvivalTime)
favstats(surgery_data$PrognosticIndex)
# Now fit the model for the first research question
summary(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data))
mplot(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data), which = 1)
mplot(lm(SurvivalTime ~ PrognosticIndex, data = surgery_data), which = 2)
# try graphing log(y) vs x to visualize a model using a log transformation
summary(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data))
plot(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data), which = 1)
plot(lm(log(SurvivalTime) ~ PrognosticIndex, data = surgery_data), which = 2)
summary(lm(SurvivalTime ~.,data = surgery_data))
vif(lm(SurvivalTime ~.,data = surgery_data))
gf_point(SurvivalTime ~ .,data = surgery_data)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 1)
plot(lm(SurvivalTime ~.,data = surgery_data), which = 2)
plot(lm(log(SurvivalTime) ~.,data = surgery_data), which = 1)
plot(lm(log(SurvivalTime) ~.,data = surgery_data), which = 2)
summary(lm(log(SurvivalTime) ~.,data = surgery_data))
plot(lm(log(SurvivalTime) ~.,data = surgery_data), which = 1)
plot(lm(log(SurvivalTime) ~.,data = surgery_data), which = 2)
all2 <- regsubsets(log(SurvivalTime) ~ ., data =surgery_data, nbest = 1)
plot(all,scale = "adjr2")
plot(all,scale = "Cp")
plot(all,scale= "bic")
summaryHH(all2)
all2 <- regsubsets(log(SurvivalTime) ~ ., data =surgery_data, nbest = 1)
plot(all2,scale = "adjr2")
plot(all2,scale = "Cp")
plot(all2,scale= "bic")
summaryHH(all2)
summary(lm(log(SurvivalTime) ~ BloodClottingScore + PrognosticIndex + EnzymeTest + Age + Alcoholmoderate + Alcoholnone + Sexmale, data = surgery_data))
View(surgery_data)
summary(lm(log(SurvivalTime) ~ BloodClottingScore + PrognosticIndex + EnzymeTest + Age + Alcohol + Sex, data = surgery_data))
plot(lm(log(SurvivalTime) ~ BloodClottingScore + PrognosticIndex + EnzymeTest + Age + Alcoholmoderate + Alcohol + Sex, data = surgery_data), which = 1)
summary(lm(log(SurvivalTime) ~ BloodClottingScore + PrognosticIndex + EnzymeTest + Age + Alcohol + Sex, data = surgery_data))
plot(lm(log(SurvivalTime) ~ BloodClottingScore + PrognosticIndex + EnzymeTest + Age + Alcohol + Sex, data = surgery_data), which = 1)
plot(lm(log(SurvivalTime) ~ BloodClottingScore + PrognosticIndex + EnzymeTest + Age + Alcohol + Sex, data = surgery_data), which = 2)
favstats(surgery_data$SurvivalTime)
favstats(surgery_data$PrognosticIndex)
plot(surgery_quantonly)
## EDA - look at response with categorical predictors
gf_boxplot(SurvivalTime ~ Sex, data = surgery_data)
## EDA - look at response with categorical predictors
gf_boxplot(SurvivalTime ~ Sex, data = surgery_data)
gf_boxplot(SurvivalTime ~ Alcohol, data = surgery_data)
library("factoextra")
library("dplyr")
library("tidyverse")
library(mclust)
data(USArrests)
nrow(USArrests)
ncol(USArrests)
apply(USArrests, 2, mean)
apply(USArrests, 2, var)
USArrests %>%
pivot_longer(cols = -c(),names_to = "type", values_to = "value") %>%
ggplot(aes(x = type, y = value)) +
geom_boxplot()
pairs(USArrests)
pca <-
USArrests %>%
prcomp(scale = TRUE)
str(pca)
pca$rotation
pca$x
pca$sdev^2
get_eig(pca) %>%
ggplot(aes(x = 1:4, y = cumulative.variance.percent)) +
geom_line() +
geom_line(aes(y=80)) +
geom_point() +
xlab("Principal Component") +
ylab("Proportion of Variance Explained") +
ggtitle("Scree Plot of Principal Components for US Arrests Data")
fviz_screeplot(pca, main='Scree Plot for the Decathlon2 Data')
pca %>%
fviz_pca_var(axes = c(1,2),
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
dist <- get_dist(USArrests, method = 'euclidean')
image(as.matrix(dist), main = "Euclidean distance")
complete <- hclust(dist, method='complete')
str(complete)
plot(complete)
cluster_h <- cutree(complete, k=3)
cluster_h
USArrests2 <-
USArrests %>%
scale()
dist2 <- get_dist(USArrests2, method = 'euclidean')
image(as.matrix(dist2), main = "Euclidean distance")
complete2 <- hclust(dist2, method='complete')
str(complete2)
plot(complete2)
cluster_h2 <- cutree(complete2, k=3)
cluster_h2
data(world_cities)
big_cities <- world_cities %>%
arrange(desc(population)) %>%
head(4000) %>%
select(longitude, latitude)
library("factoextra")
library("dplyr")
library(tidyverse)
library(mdsr)
library(readxl)
library(Rcpp)
library(ape)
library(mclust)
library("factoextra")
library("dplyr")
library(tidyverse)
library(mdsr)
library(readxl)
library(Rcpp)
library(ape)
library(mclust)
data(USArrests)
nrow(USArrests)
ncol(USArrests)
apply(USArrests, 2, mean)
apply(USArrests, 2, var)
USArrests %>%
pivot_longer(cols = -c(),names_to = "type", values_to = "value") %>%
ggplot(aes(x = type, y = value)) +
geom_boxplot()
pairs(USArrests)
pca <-
USArrests %>%
prcomp(scale = TRUE)
str(pca)
pca$rotation
pca$x
pca$sdev^2
get_eig(pca) %>%
ggplot(aes(x = 1:4, y = cumulative.variance.percent)) +
geom_line() +
geom_line(aes(y=80)) +
geom_point() +
xlab("Principal Component") +
ylab("Proportion of Variance Explained") +
ggtitle("Scree Plot of Principal Components for US Arrests Data")
fviz_screeplot(pca, main='Scree Plot for the Decathlon2 Data')
pca %>%
fviz_pca_var(axes = c(1,2),
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
dist <- get_dist(USArrests, method = 'euclidean')
image(as.matrix(dist), main = "Euclidean distance")
complete <- hclust(dist, method='complete')
str(complete)
plot(complete)
cluster_h <- cutree(complete, k=3)
cluster_h
USArrests2 <-
USArrests %>%
scale()
dist2 <- get_dist(USArrests2, method = 'euclidean')
image(as.matrix(dist2), main = "Euclidean distance")
complete2 <- hclust(dist2, method='complete')
str(complete2)
plot(complete2)
cluster_h2 <- cutree(complete2, k=3)
cluster_h2
data(world_cities)
big_cities <- world_cities %>%
arrange(desc(population)) %>%
head(4000) %>%
select(longitude, latitude)
fviz_nbclust(big_cities, kmeans, method = "silhouette")+
labs(subtitle = "Silhouette method")
set.seed(15)
city_clusts <- big_cities %>%
kmeans(centers = 3) %>%
fitted("classes") %>%
as.character()
big_cities <- big_cities %>%
mutate(cluster = city_clusts)
big_cities %>%
ggplot(aes(x = longitude, y = latitude)) +
geom_point(aes(color = cluster), alpha = 0.5)  +
scale_color_brewer(palette = "Set2")
BabyNames %>%
group_by(name, year) %>%
filter(name == 'Christopher' | name == 'Christian' | name == 'Matthew' | name == 'Samuel') %>%
summarize(total = sum(count)) %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line( size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
# load necessary packages
library(tidyverse)
library(mosaic)
library(dcData)
BabyNames %>%
group_by(name, year) %>%
filter(name == 'Christopher' | name == 'Christian' | name == 'Matthew' | name == 'Samuel') %>%
summarize(total = sum(count)) %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line( size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
eu_dist <- get_dist(pokestat, method = 'euclidean')
library(tidyverse)
library(mosaicData)
library(factoextra)
library(readr)
library(rowr)
eu_dist <- get_dist(pokestat, method = 'euclidean')
eu_dist <- get_dist(pokestat, method = 'euclidean')
pokedex <- read_csv("pokedex_(Update_05.20).csv") %>% select(-...1)
df <- pokedex %>% filter(generation %in% c(1,2,3,4))
pokenames <- df$name
pokestat <- df %>%
select(hp, attack, defense, sp_attack, sp_defense, speed)
rownames(pokestat) <- pokenames
eu_dist <- get_dist(pokestat, method = 'euclidean')
hc_complete <- hclust(eu_dist, "complete")
fviz_dend(hc_complete)
hc_complete$merge
View(pokestat)
rownames(pokestat)[345]
hc_complete$merge %>% tail()
rownames(pokestat)[257]
View(pokestat)
```{r}
pokestat[257,]
fviz_dend(hc_complete, k = 5, k_colors = "jco", as.ggplot = TRUE, main='Euclidean-Complete')
par (mfrow = c(2, 2))
plot (lm.fit2)
# clean up R environment
rm(list = ls())
# load all packages here
library (MASS)
library (ISLR2)
# user-defined functions here (if any)
# data intake
data(Boston)
# Section 3.6.3 Chunk #1
lm.fit <- lm(medv ~ lstat + age , data = Boston)
summary (lm.fit)
# Section 3.6.3 Chunk #2
lm.fit <- lm(medv ~ ., data = Boston)
summary (lm.fit)
# Section 3.6.3 Chunk #3
library (car)
vif (lm.fit)
# Section 3.6.3 Chunk #4
lm.fit1 <- lm(medv ~ . - age , data = Boston)
summary (lm.fit1)
# Section 3.6.3 Chunk #5
lm.fit1 <- update (lm.fit , ~ . - age)
# Section 3.6.4 Chunk #1
summary (lm(medv ~ lstat * age , data = Boston))
# Section 3.6.5 Chunk #1
attach (Boston)
lm.fit2 <- lm(medv ~ lstat + I(lstat^2))
summary (lm.fit2)
# Section 3.6.5 Chunk #2
lm.fit <- lm(medv ~ lstat)
anova (lm.fit , lm.fit2)
par (mfrow = c(2, 2))
plot (lm.fit2)
plot (lm.fit2)
# Section 3.6.5 Chunk #3
par (mfrow = c(2, 2))
# Section 3.6.5 Chunk #3
par (mfrow = c(2, 2))
plot (lm.fit2)
# Section 3.6.5 Chunk #4
lm.fit5 <- lm(medv ~ poly (lstat , 5))
summary (lm.fit5)
# front-matter
rm(list = ls()) #clear the workspace
# load the typical libraries
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(Lock5Data)
library(tinytex)
# define tukey plot function
TukeyNonaddPlot=function(formula,data,out="n",main="Tukey Nonadditivity Plot",ylab="Residuals"){
require(mosaic)
mod=aov(formula,data)
newdata=mod$model
names(newdata)=c("Y","A","B")
newdata$A=factor(newdata$A); newdata$B=factor(newdata$B)
I=nlevels(newdata$A)
J=nlevels(newdata$B)
cellmeans=mean(Y~A+B,data=newdata)
celltable=matrix(cellmeans,nrow=I,ncol=J)
GrandMean=mean(cellmeans)
RowEffects=rep(rowMeans(celltable)-GrandMean,J)
ColEffects=rep(colMeans(celltable)-GrandMean,each=I)
Comparisons=RowEffects*ColEffects/GrandMean
CellResid=cellmeans-(RowEffects+ColEffects+GrandMean)
plot(CellResid~Comparisons, pch=16, ylab=ylab)
modline=lm(CellResid~Comparisons)
abline(modline)
text(0,min(CellResid),paste("slope=",round(modline$coeff[2],2)),col="blue")
if(out=="comp"){return(Comparisons)}
if(out=="line"){return(modline)}
if(out=="resid"){return(CellResid)}
}
data(OilDeapsorbtion)
head(OilDeapsorbtion)
str(OilDeapsorbtion)
glimpse(OilDeapsorbtion)
favstats(Diff ~ Ultra, data = OilDeapsorbtion)
favstats(Diff ~ Ultra + Salt, data = OilDeapsorbtion)
favstats(Diff ~ Ultra + Oil, data = OilDeapsorbtion)
gf_point(Diff ~ Ultra | Oil, data = OilDeapsorbtion)
gf_point(Diff ~ Ultra | Salt, data = OilDeapsorbtion)
with(OilDeapsorbtion, interaction.plot(Ultra, Oil, Diff, lwd = 2, col = c("darkgreen", "purple")))
with(OilDeapsorbtion, interaction.plot(Ultra, Salt, Diff, lwd = 2, col = c("darkgreen", "purple")))
data2 <- OilDeapsorbtion %>%
group_by(Ultra, Oil) %>%
summarize(mean = mean(Diff), sd = sd(Diff))
gf_point(log(sd) ~ log(mean), data = data2) %>%
gf_lm(log(sd) ~ log(mean), data = data2)
lm(log(sd) ~ log(mean), data = data2)
data3 <- OilDeapsorbtion %>%
group_by(Ultra, Salt, Oil) %>%
summarize(mean = mean(Diff), sd = sd(Diff))
gf_point(log(sd) ~ log(mean), data = data3) %>%
gf_lm(log(sd) ~ log(mean), data = data3)
lm(log(sd) ~ log(mean), data = data3)
TukeyNonaddPlot(Diff ~ Ultra + Oil, data = OilDeapsorbtion)
TukeyNonaddPlot(Diff ~ Ultra + Salt, data = OilDeapsorbtion)
U5_data <- OilDeapsorbtion %>%
filter(Ultra == 5) %>%
select(Diff)
U5 <- U5_data$Diff
U10_data <- OilDeapsorbtion %>%
filter(Ultra == 10) %>%
select(Diff)
U10 <- U10_data$Diff
gf_point(U5 ~ U10) %>% gf_lm(U5 ~ U10) %>% gf_abline(intercept = ~0, slope = ~1)
lm(U5 ~ U10)
gf_point(U10 ~ U5) %>% gf_lm(U10 ~ U5) %>% gf_abline(intercept = ~0, slope = ~1)
lm(U10 ~ U5)
model1 <- aov(Diff ~ Ultra*Salt*Oil, data = OilDeapsorbtion)
summary(model1)
model2 <- aov(Diff ~ Ultra + Salt + Oil, data = OilDeapsorbtion)
summary(model2)
plot(model1)
View(OilDeapsorbtion)
OilDeapsorbtion %>%
group_by(Ultra, Salt, Oil) %>%
summarise(mean = mean(Diff), sd = sd(Diff))
with(OilDeapsorbtion, interaction.plot(Ultra, Oil, Diff, lwd = 2, col = c("darkgreen", "purple")))
with(OilDeapsorbtion, interaction.plot(Ultra, Salt, Diff, lwd = 2, col = c("darkgreen", "purple")))
with(OilDeapsorbtion, interaction.plot(Oil, Salt, Diff, lwd = 2, col = c("darkgreen", "purple")))
pairw.anova(OilDeapsorbtion$Diff, as.factor(OilDeapsorbtion$Ultra), method = "lsd")
library(asbio)
pairw.anova(OilDeapsorbtion$Diff, as.factor(OilDeapsorbtion$Ultra), method = "lsd")
favstats(Diff ~ Ultra, data = OilDeapsorbtion)
favstats(Diff ~ Ultra + Salt, data = OilDeapsorbtion)
favstats(Diff ~ Ultra + Oil, data = OilDeapsorbtion)
OilDeapsorbtion %>%
group_by(Ultra, Salt, Oil) %>%
summarise(mean = mean(Diff), sd = sd(Diff))
TukeyNonaddPlot(Diff ~ Oil + Salt, data = OilDeapsorbtion)
TukeyNonaddPlot(Diff ~ Ultra + Oil, data = OilDeapsorbtion)
TukeyNonaddPlot(Diff ~ Ultra + Salt, data = OilDeapsorbtion)
TukeyNonaddPlot(Diff ~ Oil + Salt, data = OilDeapsorbtion)
library(asbio)
pairw.anova(OilDeapsorbtion$Diff, as.factor(OilDeapsorbtion$Oil), method = "lsd")
pairw.anova(OilDeapsorbtion$Diff, as.factor(OilDeapsorbtion$Oil), method = "lsd")
plot(model1)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinyBS")
install.packages("shinyWidgets")
devtools::install_github("EducationShinyAppTeam/boastUtils", ref = "develop")
remove.packages("httpuv")
devtools::install_version("httpuv", version = "1.6.0")
shiny::runApp('C:/Shiny_Apps/personal_introduction_app-hy2021-IT')
runApp()
runApp('C:/Shiny_Apps/personal_introduction_app-hy2021-IT')
shiny::runApp('C:/Shiny_Apps/personal_introduction_app-hy2021-IT')
runApp('C:/Shiny_Apps/personal_introduction_app-hy2021-IT')
shiny::runApp('C:/Shiny_Apps/Time_Series_Game')
